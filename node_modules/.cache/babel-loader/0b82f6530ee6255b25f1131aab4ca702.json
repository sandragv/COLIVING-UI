{"ast":null,"code":"import _slicedToArray from \"/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/src/Colivings.js\";\nimport React, { useState, useEffect } from 'react';\nimport Search from './Search';\nimport Coliving from './Coliving';\nimport './Colivings.css';\n\nconst Colivings = () => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        colivings = _useState4[0],\n        setColivings = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorMessage = _useState6[0],\n        setErrorMessage = _useState6[1];\n\n  useEffect(() => {\n    fetch('http://localhost:3300/colivings').then(response => response.json()).then(jsonResponse => {\n      setColivings(jsonResponse);\n      setLoading(false);\n    });\n  }, []);\n  fetch('./data.json').then(response => {\n    console.log(response);\n    return response.json();\n  }).then(data => {\n    // Work with JSON data here\n    console.log(data);\n  }).catch(err => {\n    // Do something for an error here\n    console.log(\"Error Reading data \" + err);\n  });\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n  };\n\n  const filteredSearch = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n    fetch('http://localhost:3300/colivings', {\n      method: 'POST',\n      body: JSON.stringify(searchValue),\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        setColivings(jsonResponse.Search);\n        setLoading(false);\n      } else {\n        setErrorMessage(jsonResponse.Error);\n        setLoading(false);\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"colivingssearch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    id: \"banner-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Welcome! Find your next home:\"), React.createElement(Search, {\n    search: filteredSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"colivings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, loading && !errorMessage ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"loading...\") : errorMessage ? React.createElement(\"div\", {\n    className: \"errorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, errorMessage) : colivings.map((coliving, index) => React.createElement(Coliving, {\n    key: `${index}-${coliving.id}`,\n    coliving: coliving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))));\n};\n\nexport default Colivings;","map":{"version":3,"sources":["/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/src/Colivings.js"],"names":["React","useState","useEffect","Search","Coliving","Colivings","loading","setLoading","colivings","setColivings","errorMessage","setErrorMessage","fetch","then","response","json","jsonResponse","console","log","data","catch","err","search","searchValue","filteredSearch","method","body","JSON","stringify","headers","Response","Error","map","coliving","index","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Search from './Search';\nimport Coliving from './Coliving'\nimport './Colivings.css';\n\nconst Colivings = () => {\n    const [loading, setLoading] = useState(true)\n    const [colivings, setColivings] = useState([])\n    const [errorMessage, setErrorMessage] = useState(null);\n    useEffect(() => {\n        fetch('http://localhost:3300/colivings')\n            .then(response => response.json())\n            .then(jsonResponse => {\n                setColivings(jsonResponse);\n                setLoading(false);\n            })\n    }, []);\n\n    fetch('./data.json').then(response => {\n        console.log(response);\n        return response.json();\n      }).then(data => {\n        // Work with JSON data here\n        console.log(data);\n      }).catch(err => {\n        // Do something for an error here\n        console.log(\"Error Reading data \" + err);\n      });\n\n    const search = searchValue => {\n        setLoading(true);\n        setErrorMessage(null);\n    };\n\n    const filteredSearch = (searchValue) => {\n        setLoading(true);\n        setErrorMessage(null);\n        fetch('http://localhost:3300/colivings', {\n            method: 'POST',\n            body: JSON.stringify(searchValue),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n            if (jsonResponse.Response === \"True\") {\n                setColivings(jsonResponse.Search);\n                setLoading(false);\n            } else {\n                setErrorMessage(jsonResponse.Error);\n                setLoading(false);\n            }\n\n        });\n    };\n\n    return (\n        <div className=\"colivingssearch\">\n            <section id=\"banner-search\"></section>\n            <h1>Welcome! Find your next home:</h1>\n            <Search search={filteredSearch} />\n            <div className=\"colivings\">\n                {loading && !errorMessage ? (\n                    <span>loading...</span>\n                ) : errorMessage ? (\n                    <div className=\"errorMessage\">{errorMessage}</div>\n                ) : (\n                            colivings.map((coliving, index) => (\n                                <Coliving key={`${index}-${coliving.id}`} coliving={coliving} />\n                            ))\n                        )}\n            </div>\n        </div>\n    );\n};\n\n\nexport default Colivings\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}