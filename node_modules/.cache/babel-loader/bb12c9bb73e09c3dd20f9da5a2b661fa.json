{"ast":null,"code":"import _objectSpread from \"/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate) => {\n  const _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isSubmitting = _useState6[0],\n        setIsSubmitting = _useState6[1];\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setValues(_objectSpread({}, values, {\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n    const user = {\n      email,\n      password\n    };\n\n    try {\n      const ret = await fetch('http://localhost:3300/login', {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await ret.json();\n      if (ret.ok) login(data);\n    } catch (err) {\n      console.warn('Error:', err);\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/src/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","email","password","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","event","target","name","value","handleSubmit","e","preventDefault","user","ret","fetch","method","body","JSON","stringify","headers","data","json","ok","login","err","console","warn","Object","keys","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA,oBACVJ,QAAQ,CAAC;AAAEK,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CADE;AAAA;AAAA,QAC/BC,MAD+B;AAAA,QACvBC,SADuB;;AAAA,qBAEVR,QAAQ,CAAC,EAAD,CAFE;AAAA;AAAA,QAE/BS,MAF+B;AAAA,QAEvBC,SAFuB;;AAAA,qBAGEV,QAAQ,CAAC,KAAD,CAHV;AAAA;AAAA,QAG/BW,YAH+B;AAAA,QAGjBC,eAHiB;;AAKtC,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,0BACJA,KAAK,CAACC,MADF;AAAA,UACpBC,IADoB,iBACpBA,IADoB;AAAA,UACdC,KADc,iBACdA,KADc;AAE5BT,IAAAA,SAAS,mBACJD,MADI;AAEP,OAACS,IAAD,GAAQC;AAFD,OAAT;AAID,GAND;;AAQA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACAV,IAAAA,SAAS,CAACN,QAAQ,CAACG,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMS,IAAI,GAAG;AAAEhB,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAb;;AACA,QAAI;AACF,YAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACrDC,QAAAA,MAAM,EAAE,MAD6C;AAErDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAF+C;AAGrDO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAH4C,OAAhC,CAAvB;AAQA,YAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACA,UAAIR,GAAG,CAACS,EAAR,EACEC,KAAK,CAACH,IAAD,CAAL;AACH,KAZD,CAYE,OAAOI,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,IAAR,CAAa,QAAb,EAAuBF,GAAvB;AACD;AACJ,GApBC;;AAsBFhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImC,MAAM,CAACC,IAAP,CAAY5B,MAAZ,EAAoB6B,MAApB,KAA+B,CAA/B,IAAoC3B,YAAxC,EAAsD;AACpDR,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACM,MAAD,CAJM,CAAT;AAMA,SAAO;AACLI,IAAAA,YADK;AAELK,IAAAA,YAFK;AAGLX,IAAAA,MAHK;AAILE,IAAAA;AAJK,GAAP;AAMC,CA/CD;;AAiDA,eAAeP,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({ email: \"\", password: \"\" });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n    const user = { email, password }\n    try {\n      const ret = await fetch('http://localhost:3300/login', {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      const data = await ret.json()\n      if (ret.ok)\n        login(data)\n    } catch (err) {\n      console.warn('Error:', err)\n    }\n};\n\nuseEffect(() => {\n  if (Object.keys(errors).length === 0 && isSubmitting) {\n    callback();\n  }\n}, [errors]);\n\nreturn {\n  handleChange,\n  handleSubmit,\n  values,\n  errors\n};\n};\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}