{"ast":null,"code":"import _slicedToArray from \"/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Search from './Search';\n\nconst Colivings = () => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        colivings = _useState4[0],\n        setColivings = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorMessage = _useState6[0],\n        setErrorMessage = _useState6[1];\n\n  useEffect(() => {\n    fetch('http://localhost:3300/colivings').then(response => response.json()).then(c => setColivings(c));\n    setLoading(false);\n  }, []);\n};\n\nexport const FilteredSearch = searchValue => {\n  setLoading(true);\n  setErrorMessage(null);\n  fetch('http://localhost:3300/colivings', {\n    method: 'POST',\n    body: JSON.stringify(searchValue),\n    headers: {\n      'Content-Type': 'application/json'\n    }.then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        setColivings(jsonResponse.Search);\n        setLoading(false);\n      } else {\n        setErrorMessage(jsonResponse.Error);\n        setLoading(false);\n      }\n    })\n  });\n};\nexport default Colivings;","map":{"version":3,"sources":["/home/hab23/Documents/coliving/development/hab_gestion_coliving_ui/src/Colivings.js"],"names":["React","useState","useEffect","Search","Colivings","loading","setLoading","colivings","setColivings","errorMessage","setErrorMessage","fetch","then","response","json","c","FilteredSearch","searchValue","method","body","JSON","stringify","headers","jsonResponse","Response","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACUH,QAAQ,CAAC,IAAD,CADlB;AAAA;AAAA,QACbI,OADa;AAAA,QACJC,UADI;;AAAA,qBAEcL,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAEbM,SAFa;AAAA,QAEFC,YAFE;;AAAA,qBAGoBP,QAAQ,CAAC,IAAD,CAH5B;AAAA;AAAA,QAGbQ,YAHa;AAAA,QAGCC,eAHD;;AAIpBR,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,CAAC,IAAIP,YAAY,CAACO,CAAD,CAF3B;AAGAT,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,GANQ,EAMN,EANM,CAAT;AAOH,CAXD;;AAaA,OAAO,MAAMU,cAAc,GAAIC,WAAD,IAAiB;AAC3CX,EAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,EAAAA,eAAe,CAAC,IAAD,CAAf;AACAC,EAAAA,KAAK,CAAC,iCAAD,EAAoC;AACrCO,IAAAA,MAAM,EAAE,MAD6B;AAErCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,WAAf,CAF+B;AAGrCK,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,MAGRV,IAHQ,CAGHC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHT,EAIRF,IAJQ,CAIHW,YAAY,IAAI;AAClB,UAAIA,YAAY,CAACC,QAAb,KAA0B,MAA9B,EAAsC;AACpChB,QAAAA,YAAY,CAACe,YAAY,CAACpB,MAAd,CAAZ;AACAG,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD,MAGO;AACHI,QAAAA,eAAe,CAACa,YAAY,CAACE,KAAd,CAAf;AACFnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAZM;AAH4B,GAApC,CAAL;AAiBK,CApBF;AAuBP,eAAeF,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Search from './Search'\n\n\nconst Colivings = () => {\n    const [loading, setLoading] = useState(true)\n    const [colivings, setColivings] = useState([])\n    const [errorMessage, setErrorMessage] = useState(null);\n    useEffect(() => {\n        fetch('http://localhost:3300/colivings')\n            .then(response => response.json())\n            .then(c => setColivings(c))\n        setLoading(false);\n\n    }, []);\n}\n\nexport const FilteredSearch = (searchValue) => {\n    setLoading(true);\n    setErrorMessage(null);\n    fetch('http://localhost:3300/colivings', {\n        method: 'POST',\n        body: JSON.stringify(searchValue),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n        .then(response => response.json())\n        .then(jsonResponse => {\n            if (jsonResponse.Response === \"True\") {\n              setColivings(jsonResponse.Search);\n              setLoading(false);\n            } else {\n                setErrorMessage(jsonResponse.Error);\n              setLoading(false);\n            }\n          })\n          });\n        }\n\n\nexport default Colivings\n\n\n\n"]},"metadata":{},"sourceType":"module"}